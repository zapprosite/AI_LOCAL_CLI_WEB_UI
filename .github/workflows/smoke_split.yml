---
name: Smoke (Split)

on:
  workflow_dispatch:
  pull_request:
    types: [labeled]

jobs:
  smoke:
    name: Smoke ${{ matrix.service }}
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && github.event.action == 'labeled' && github.event.label.name == 'smoke')
    runs-on: ubuntu-latest
    timeout-minutes: 45
    services:
      docker:
        image: docker:24-dind
        options: --privileged
        env:
          DOCKER_TLS_CERTDIR: ""
        ports:
          - 2375:2375
    env:
      DOCKER_HOST: tcp://localhost:2375
      DOCKER_TLS_CERTDIR: ""
    strategy:
      fail-fast: true
      matrix:
        service: [ollama, litellm, openwebui, qdrant]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Wait for Docker
        run: |
          for i in $(seq 1 60); do
            docker version && break || sleep 2
          done
          docker info
          docker compose version

      - name: Ensure external network exists
        run: docker network create ai_stack_net || true

      - name: Compose up (${{ matrix.service }})
        working-directory: ai_gateway
        run: |
          set -euo pipefail
          cp .env.example .env || true
          docker compose \
            -f docker-compose.stack.yml \
            -f docker-compose.pins.yml \
            -f docker-compose.health.yml \
            up -d ${{ matrix.service }}

      - name: Wait for health (${{ matrix.service }})
        working-directory: ai_gateway
        run: |
          set -euo pipefail
          svc="${{ matrix.service }}"
          # Load env for possible auth
          if [ -f .env ]; then set -a; . ./.env; set +a; fi
          auth=""; [ -n "${LITELLM_MASTER_KEY:-}" ] && auth="-H Authorization: Bearer ${LITELLM_MASTER_KEY}"
          http_ok() { curl -fsS -o /dev/null -w '%{http_code}' "$@" | grep -q '^200$'; }
          for i in $(seq 1 60); do
            case "$svc" in
              ollama)
                http_ok http://127.0.0.1:11434/api/tags && break || true ;;
              litellm)
                http_ok $auth http://127.0.0.1:4000/v1/models && break || true ;;
              openwebui)
                http_ok http://127.0.0.1:3000 && break || true ;;
              qdrant)
                http_ok http://127.0.0.1:6333/readyz && break || true ;;
            esac
            sleep 2
          done
          # Final check
          case "$svc" in
            ollama)   http_ok http://127.0.0.1:11434/api/tags ;;
            litellm)  http_ok $auth http://127.0.0.1:4000/v1/models ;;
            openwebui)http_ok http://127.0.0.1:3000 ;;
            qdrant)   http_ok http://127.0.0.1:6333/readyz ;;
          esac

      - name: Quick probe (${{ matrix.service }})
        working-directory: ai_gateway
        run: |
          set -euo pipefail
          if [ -f .env ]; then set -a; . ./.env; set +a; fi
          auth=""; [ -n "${LITELLM_MASTER_KEY:-}" ] && auth="-H Authorization: Bearer ${LITELLM_MASTER_KEY}"
          case "${{ matrix.service }}" in
            ollama)
              curl -fsS http://127.0.0.1:11434/api/tags | head -c 256 | sed -n '1,5p'
              ;;
            litellm)
              curl -fsS $auth http://127.0.0.1:4000/v1/models | head -c 256 | sed -n '1,5p'
              ;;
            openwebui)
              curl -fsS -o /dev/null -w '%{http_code}\n' http://127.0.0.1:3000 | grep '^200$'
              ;;
            qdrant)
              curl -fsS http://127.0.0.1:6333/readyz | grep -E 'ok|ready|^$' || true
              ;;
          esac

      - name: Compose ps
        if: always()
        working-directory: ai_gateway
        run: docker compose -f docker-compose.stack.yml -f docker-compose.pins.yml -f docker-compose.health.yml ps

      - name: Collect logs on failure
        if: failure()
        working-directory: ai_gateway
        run: |
          set -euo pipefail
          ART=../_gha_artifacts/${{ matrix.service }}
          mkdir -p "$ART"
          docker compose -f docker-compose.stack.yml -f docker-compose.pins.yml -f docker-compose.health.yml ps > "$ART/compose_ps.txt" || true
          docker compose -f docker-compose.stack.yml -f docker-compose.pins.yml -f docker-compose.health.yml logs --no-color --tail=200 > "$ART/compose_logs.txt" || true

      - name: Upload logs artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-split-${{ matrix.service }}-logs
          path: _gha_artifacts/${{ matrix.service }}

      - name: Compose down
        if: always()
        working-directory: ai_gateway
        run: docker compose -f docker-compose.stack.yml -f docker-compose.pins.yml -f docker-compose.health.yml down -v
